#Question 1
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that outputs all of the contents of the table.
SELECT * FROM SALARIES;

#Question 2
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that returns the names of all the professors in the table.
SELECT Professor_Name FROM SALARIES;

#Question 3
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that returns all departments in the table (no duplicates).
SELECT DISTINCT Department FROM SALARIES;

#Question 4
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that returns the number of professors whose salary is greater than 150000.
SELECT COUNT(Professor_Name) FROM SALARIES WHERE Salary >150000;

#Question 5
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that returns all departments and their aggregate salaries (in this column order).
SELECT Department, SUM(Salary) FROM SALARIES GROUP BY Department;

#Question 6
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that returns the name and salary (in this column order) of the professor with the highest salary.
SELECT Professor_Name, MAX(Salary) FROM SALARIES;

#Question 7
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that returns the name and salary (in this column order) of the professor with the highest salary in the "Computer Science" department.
SELECT Professor_Name, MAX(Salary) FROM SALARIES WHERE Department = 'Computer Science';

#Question 8
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that returns the name and salaries (in this column order) of the Top 5 highest earning professors.
SELECT Professor_Name, Salary FROM SALARIES ORDER BY Salary DESC LIMIT 5;

#Question 9
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that returns the name and salary (in this column order) of the lowest earning professor.
SELECT Professor_Name, MIN(Salary) FROM SALARIES;

#Question 10
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that returns the department Professor "Zaniolo" works in.
SELECT Department FROM SALARIES WHERE Professor_Name LIKE 'Zaniolo';

#Question 11
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that returns all the professor names that begin with the letter 'C'.
SELECT Professor_Name FROM SALARIES WHERE Professor_Name LIKE 'C%';

#Question 12
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that returns the third highest salary in the table. Duplicate salaries count as one. For example, if you have 20, 20, 10, and 5, 10 is the second highest salary.
SELECT Salary FROM SALARIES ORDER BY Salary DESC LIMIT 1 OFFSET 2;

#Question 13
#CHECKED_OUT (First_Name (TEXT), Last_Name (TEXT), Book_ID (INT))
#Write a query that returns the first and last name (in this column order) of people who share their last name with someone that has also checked out a book.
SELECT DISTINCT a.First_Name, a.Last_Name FROM CHECKED_OUT a, CHECKED_OUT b WHERE a.Last_Name = b.Last_Name AND a.First_Name != b.First_Name;

#Question 14
#CHECKED_OUT (First_Name (TEXT), Last_Name (TEXT), Book_ID (INT))
#BOOKS (Book_ID (INT), Book_Name (TEXT), Author (TEXT))
#Write a query that returns the first and last name of all people who checked out a book by Terry Crews.
SELECT DISTINCT CHECKED_OUT.First_Name, CHECKED_OUT.Last_Name FROM CHECKED_OUT LEFT JOIN BOOKS ON CHECKED_OUT.Book_ID = BOOKS.Book_ID WHERE BOOKS.Author = 'Terry Crews';

#Question 15
#CHECKED_OUT (First_Name (TEXT), Last_Name (TEXT), Book_ID (INT))
#BOOKS (Book_ID (INT), Book_Name (TEXT), Author (TEXT))
#Write a query that returns the first and last names of all people who checked out "To Kill a Mockingbird" by Harper Lee.
SELECT DISTINCT CHECKED_OUT.First_Name, CHECKED_OUT.Last_Name FROM CHECKED_OUT LEFT JOIN BOOKS ON BOOKS.Book_ID = CHECKED_OUT.Book_ID WHERE BOOKS.Book_Name = 'To Kill a Mockingbird' AND BOOKS.Author = 'Harper Lee';

#Question 16
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that returns the average salary of the professors in the table.
SELECT AVG(Salary) FROM SALARIES;

#Question 17
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Each professor in the Computer Science department just got a 10,000 dollar raise. Write a query that gives the names and new salaries (in this column order) of the Computer Science professors.
SELECT Professor_Name, Salary + 10000 AS New_Salary FROM SALARIES WHERE Department = 'Computer Science';

#Question 18
#CHECKED_OUT (First_Name (TEXT), Last_Name (TEXT), Book_ID (INT))
#Write a query that outputs the SQL statement used to create the above table.
SELECT sql FROM sqlite_master WHERE type = 'table' AND tbl_name = 'CHECKED_OUT';

#Question 19
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that returns the name and salary (in this column order) of all professors who make more than 4 times as much as the lowest paid professor.
SELECT Professor_Name, Salary FROM SALARIES WHERE Salary > (SELECT MIN(Salary) FROM SALARIES)*4;

#Question 20
#BOOKS (Book_ID (INT), Book_Name (TEXT), Author (TEXT))
#Write a query that returns the amount of unique authors who have written books in this table.
SELECT COUNT(DISTINCT(Author)) FROM BOOKS;

#Question 21
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that returns the name and salary (in this column order) of professors who earn between 120000 and 250000 a year (inclusive).
SELECT Professor_Name, Salary FROM SALARIES WHERE Salary BETWEEN 120000 AND 250000;

#Question 22
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that returns all professors (all columns) who either work in the "Anthropology" department or makes more than 150000 a year.
SELECT * FROM SALARIES WHERE Department = 'Anthropology' OR Salary > 150000;

#Question 23
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that returns the highest salary in the "Computer Science" department.
SELECT MAX(Salary) FROM SALARIES WHERE Department = 'Computer Science';

#Question 24
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
Write a query that returns the amount of professors who earn more than twice as much as the lowest paid professor in the "Political Science" department.
SELECT COUNT(*) FROM SALARIES WHERE Salary > (SELECT MIN(Salary) FROM SALARIES WHERE Department = 'Political Science')*2;

#Question 25
#CHECKED_OUT (First_Name (TEXT), Last_Name (TEXT), Book_ID (INT))
#BOOKS (Book_ID (INT), Book_Name (TEXT), Author (TEXT))
#Write a query that returns the names of all books checked out by Justin (first name) Lee (last name).
SELECT BOOKS.Book_Name from BOOKS LEFT JOIN CHECKED_OUT ON CHECKED_OUT.Book_ID = BOOKS.Book_ID WHERE CHECKED_OUT.First_Name = 'Justin' AND CHECKED_OUT.Last_Name = 'Lee';

#Question 26
#CHECKED_OUT (First_Name (TEXT), Last_Name (TEXT), Book_ID (INT))
#Write a query that returns the full names (full name is first name followed by a space and then last name) of everyone who has checked out a book. No duplicates!
SELECT DISTINCT(COALESCE(First_Name, '') || ' ' || COALESCE(Last_Name, '')) AS Full_Name FROM CHECKED_OUT;

#Question 27
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that returns the department that makes the most along with the department's total aggregate salary.
SELECT Department, SUM(Salary) FROM SALARIES GROUP BY Department ORDER BY SUM(Salary) DESC LIMIT 1;

#Question 28
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that returns the department with the highest average salary along with that average salary.
SELECT Department, AVG(Salary) FROM SALARIES GROUP BY Department ORDER BY AVG(Salary) DESC LIMIT 1;

#Question 29
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that returns the name, department, and salary (in this column order) of each professor who is the highest earning in their department.
SELECT Professor_Name, Department, MAX(Salary) FROM SALARIES GROUP BY Department;

#Question 30
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that returns the name and salary (in this column order) of each professor who is either a top 3 or bottom 3 earner (include ties).
SELECT Professor_Name, Salary FROM SALARIES WHERE Salary >= (SELECT DISTINCT Salary FROM SALARIES ORDER BY Salary DESC LIMIT 1 OFFSET 2) OR Salary <= (SELECT DISTINCT Salary FROM SALARIES ORDER BY Salary ASC LIMIT 1 OFFSET 2);

#Question 31
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that returns every department and the number of professors in each one (in this column order).
SELECT Department, COUNT(Professor_Name) FROM SALARIES GROUP BY Department;

#Question 32
#SALARIES (Professor_Name (TEXT), Department (TEXT), Salary (INT))
#Write a query that returns the department with the most professors and that amount (in this column order).
SELECT Department, COUNT(Professor_Name) FROM SALARIES GROUP BY Department ORDER BY COUNT(Professor_Name) DESC LIMIT 1;
